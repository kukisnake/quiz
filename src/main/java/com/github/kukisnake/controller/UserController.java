package com.github.kukisnake.controller;

import com.github.kukisnake.entity.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import com.github.kukisnake.repository.UserRepository;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /demo (after Application path)
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    private boolean userExist(String name) {
        User selectedUser = userRepository.findByName(name);
        if (selectedUser != null) {
            return true;
        } else {
            return false;
        }
    }

    @GetMapping(path="/add") // Map ONLY GET Requests
    public @ResponseBody String addUser (@RequestParam String name, @RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        if (userExist(name)) {
            return "User " + name + " already exist";
        } else {
            User n = new User();
            n.setName(name);
            n.setEmail(email);
            userRepository.save(n);
            return "User " + name + " successfully saved";
        }
    }

    @GetMapping(path="/delete") // Map ONLY GET Requests
    public @ResponseBody String deleteUser (@RequestParam String name) {
        if (userExist(name)) {
            User userToDelete = userRepository.findByName(name);
            userRepository.delete(userToDelete);
            return "User " + name + " successfully deleted";
        } else {
            return "User " + name + " doesn't exist";
        }
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }
}